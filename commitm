#!/usr/bin/env perl

use v5.10;
use utf8;
use strict;
use FindBin qw($Bin $Script);
use lib "$Bin/lib";
use YAML::XS qw(LoadFile DumpFile);
use Getopt::Long;
use Try::Catch;
use Function::Parameters;
use File::Copy qw(copy);
use List::Util qw(first);
use List::MoreUtils qw(uniq);
use Regexp::Common qw(profanity);
use Pod::Usage qw(pod2usage);

use DescriptionGenerator;

fun get_message_filename($lang = undef) {
    state $filename = "$Bin/$Script.d/" . ($lang ? "lang/$lang" : 'messages') .
                      '.yml';

    return $filename;
}

fun load_messages($lang = undef, $search_str = '') {
    my $messages;
    my $message_filename = get_message_filename($lang);

    try {
        $messages = LoadFile($message_filename);
    }
    catch {
        die "Failed loading $message_filename: $_";
    };

    unless (ref $messages eq 'ARRAY') {
        die "No message list for ‘$lang’ found";
    }

    return [grep { /$search_str/ } @$messages];
}

fun output_message($lang = undef, $search_str = '') {
    my $messages;
    try {
        $messages = load_messages($lang, $search_str);
    }
    catch {
        die "Messages not retrieved: $_";
    };

    say $messages->[rand @$messages];
}

fun add_message($lang = undef, $message = undef) {
    unless ($message) { die "Message can’t be blank" }

    if ($RE{profanity}->matches($message)) { die "Profanity disallowed" }

    my $messages = [];
    my $message_filename = get_message_filename($lang);
    my $backup_filename;

    if (-e $message_filename) {
        try {
            $messages = load_messages($lang);
        }
        catch {
            die "Messages not retrieved: $_";
        };

        if (first { $_ eq $message } @$messages) { return; }

        $backup_filename = $message_filename . '.bak';

        try {
            copy($message_filename, $backup_filename);
        }
        catch {
            die "Failed making a backup: $_";
        };
    }

    $messages = [sort ($message, @$messages)];

    try {
        DumpFile($message_filename, $messages);
    }
    catch {
        die "Failed writing to $message_filename: $_";
    };

    unlink $backup_filename if $backup_filename;
}

fun main() {
    my $lang;
    my $help = 0;
    my $descriptive = 0;
    my $added_message = '';
    my $search_str = '';

    try {
        GetOptions(
            'help' => \$help,
            'language=s' => \$lang,
            'add=s' => \$added_message,
            'grep=s' => \$search_str,
            'descriptive' => \$descriptive
        ) or pod2usage(1);
    }
    catch {
        die 'Failed getting command line arguments.';
    };

    if ($help) { pod2usage(1); }

    if ($added_message && $search_str) {
        die 'Cannot both add and grep.';
    }

    if ($added_message) {
        try {
            add_message($lang, $added_message);
        }
        catch {
            die "Failed adding message: $_";
        };
    }
    else {
        output_message($lang, $search_str);        
        if ($descriptive) {
            say "\n" . DescriptionGenerator::random_from("$Bin/$Script.d/descriptions")
        }
    }
}

binmode(STDOUT, ':encoding(UTF-8)');
main();

__END__

=encoding utf-8

=head1 NAME

commitm — Commit Messages Done Quickly!

=head1 SYNOPSIS

commitm [options]

=head1 OPTIONS

Options:

 -help       Display help
 -lang       Use a language-specific message
 --language  Same as -lang
 -add        Add a message
 -grep       Search for a message containing the search substring

If no language is specified, a language-agnostic message will be output.

=head1 DESCRIPTION

Who has much time writing a commit message? Just generate it!

=cut
